var documenterSearchIndex = {"docs":
[{"location":"api/#@docs","page":"API","title":"```@docs","text":"","category":"section"},{"location":"api/#FITS.fits","page":"API","title":"FITS.fits","text":"","category":"section"},{"location":"api/#FITS.info","page":"API","title":"FITS.info","text":"","category":"section"},{"location":"api/#FITS.read","page":"API","title":"FITS.read","text":"","category":"section"},{"location":"api/#FITS.write","page":"API","title":"FITS.write","text":"","category":"section"},{"location":"api/#FITS.HDU","page":"API","title":"FITS.HDU","text":"","category":"section"},{"location":"api/#FITS.Card","page":"API","title":"FITS.Card","text":"","category":"section"},{"location":"api/#","page":"API","title":"```","text":"","category":"section"},{"location":"HDU/#Header-data-unit-(HDU)","page":"Header-data unit (HDU)","title":"Header-data unit (HDU)","text":"","category":"section"},{"location":"HDU/#FITS.Bintable","page":"Header-data unit (HDU)","title":"FITS.Bintable","text":"Bintable header-data unit (HDU)\n\nA Bintable HDU consists of a vector of cards and optionally a 2-dimensional array of binary data structured as a vector of records.\n\n\n\n\n\n","category":"type"},{"location":"HDU/#FITS.DataFormat","page":"Header-data unit (HDU)","title":"FITS.DataFormat","text":"DataFormat(type, leng, shape, param, group, heap)\n\nThe generic data format descriptor for HDUs.\n\n\n\n\n\n","category":"type"},{"location":"HDU/#FITS.HDU","page":"Header-data unit (HDU)","title":"FITS.HDU","text":"HDU{T}(cards, data)\n\nCreate an header-data unit type, where T is an AbstractHDU.\n\n\n\n\n\n","category":"type"},{"location":"HDU/#FITS.HDU-Union{Tuple{}, Tuple{I}, Tuple{B}, Tuple{D}, Tuple{C}, Tuple{D, C}} where {C<:(Union{Nothing, Vector{Card}, Vector{Card{<:Any}}, Array{Card{T}, 1}, Card} where T<:FITS.AbstractCardType), D<:Union{Nothing, Tuple, AbstractArray, NamedTuple}, B<:Bool, I<:Integer}","page":"Header-data unit (HDU)","title":"FITS.HDU","text":"HDU([data, [cards]]; <keywords>)\nHDU(cards; <keywords>)\nHDU(type, nothing, [cards]; <keywords>)\nHDU(type, data, [cards]; <keywords>)\n\nCreate an header-data unit described by data and cards of type AbstractHDU.\n\nThe HDU function tries to determine the HDU type based on the data and cards. If only data is provided, then an array is interpreted as a Primary HDU and a Tuple or NamedTuple as a BinaryTable. If mandatory cards are provided, then they are used to determine the HDU type. Otherwise, the HDU type must be specified.\n\nHDU types are: Primary, Random, Image, Table, Bintable, and Conform.\n\narguments\n\ndata::U=nothing: the binary or ASCII data, where U<:Union{AbstractArray,   Tuple, NamedTuple, Nothing}\ncards::U=nothing: the list of cards, where U<:Union{Card, Vector{Card}, Nothing}\n\nKeywords\n\nrecord::Bool=false: structure the data as a list of records\nscale::Bool=true: apply the scale and zero keywords to the data\nappend::Bool=false: append CONTINUE cards for long strings (>68 characters)\nfixed::Bool=true: create fixed format cards\nslash::Integer=32: character index of the comment separator (/)\nlpad::Integer=1: number of spaces before the comment separator\nrpad::Integer=1: number of spaces after the comment separator\ntruncate::Bool=true: truncate the comment string at the end of the card\n\n\n\n\n\n","category":"method"},{"location":"HDU/#FITS.Image","page":"Header-data unit (HDU)","title":"FITS.Image","text":"Image header-data unit (HDU)\n\nAn Image HDU consists of a vector cards and optionally a multidimensional array (<=999 dimensions).\n\n\n\n\n\n","category":"type"},{"location":"HDU/#FITS.Primary","page":"Header-data unit (HDU)","title":"FITS.Primary","text":"Primary header-data unit (HDU)\n\nA Primary HDU consists of a vector of cards and optionally a multidimensional array (<=999 dimensions). The Primary HDU is the first HDU in a vector of HDUs.\n\n\n\n\n\n","category":"type"},{"location":"HDU/#FITS.Random","page":"Header-data unit (HDU)","title":"FITS.Random","text":"Random header-data unit (HDU)\n\nA Random HDU consists of a vector of cards and optionally a vector of records containing a list of parameters followed by a multidimensional array. The Random HDU is the first HDU in a vector of HDUs.\n\n\n\n\n\n","category":"type"},{"location":"HDU/#FITS.Table","page":"Header-data unit (HDU)","title":"FITS.Table","text":"Table header-data unit (HDU)\n\nA Table HDU consists of a vector of cards and optionally a 2-dimensional array of ASCII data structured as vector of records.\n\n\n\n\n\n","category":"type"},{"location":"HDU/#Base.get","page":"Header-data unit (HDU)","title":"Base.get","text":"get(cards, key, default=nothing)\n\nGet the keyword value in a list of cards. Return default if not found.\n\n\n\n\n\n","category":"function"},{"location":"HDU/#Base.getindex-Tuple{Union{Vector{Card}, Vector{Card{<:Any}}}, AbstractString}","page":"Header-data unit (HDU)","title":"Base.getindex","text":"getindex(cards, key)\n\nGet the keyword value in a list of cards.\n\n\n\n\n\n","category":"method"},{"location":"HDU/#Base.haskey-Tuple{Union{Vector{Card}, Vector{Card{<:Any}}}, AbstractString}","page":"Header-data unit (HDU)","title":"Base.haskey","text":"haskey(cards, key)\n\nCheck for keyword in list of cards.\n\n\n\n\n\n","category":"method"},{"location":"HDU/#FITS.info-Tuple{HDU}","page":"Header-data unit (HDU)","title":"FITS.info","text":"info(hdu::HDU)\n\nBriefly describe the header-data unit.\n\n\n\n\n\n","category":"method"},{"location":"HDU/#FITS.read-Tuple{IO, Type{HDU}}","page":"Header-data unit (HDU)","title":"FITS.read","text":"read(io, type; <keywords>)\n\nRead the specified HDU type from a file.\n\n\n\n\n\n","category":"method"},{"location":"HDU/#FITS.typeofhdu-Tuple{U} where U<:Union{Nothing, Tuple, AbstractArray, NamedTuple}","page":"Header-data unit (HDU)","title":"FITS.typeofhdu","text":"typeofhdu(data)\n\nDetermine the HDU type based on the data structure.\n\n\n\n\n\n","category":"method"},{"location":"HDU/#FITS.typeofhdu-Union{Tuple{Dict{S, V}}, Tuple{V}, Tuple{S}} where {S<:AbstractString, V<:Union{Missing, AbstractString, Number}}","page":"Header-data unit (HDU)","title":"FITS.typeofhdu","text":"typeofhdu(dict)\n\nDetermine the HDU type based on the list of mandatory keywords.\n\n\n\n\n\n","category":"method"},{"location":"HDU/#FITS.typeofhdu-Union{Tuple{V}, Tuple{S}, Tuple{U}, Tuple{U, Dict{S, V}}} where {U<:Union{Nothing, Tuple, AbstractArray, NamedTuple}, S<:AbstractString, V<:Union{Missing, AbstractString, Number}}","page":"Header-data unit (HDU)","title":"FITS.typeofhdu","text":"typeofhdu(data, dict)\n\nDetermine the HDU type based on the data and list of mandatory keywords.\n\n\n\n\n\n","category":"method"},{"location":"HDU/#FITS.write-Tuple{IO, HDU}","page":"Header-data unit (HDU)","title":"FITS.write","text":"write(io, hdu; <keywords>)\n\nWrite the specified HDU type to a file.\n\n\n\n\n\n","category":"method"},{"location":"HDU/#FITS.HDU(::Vector{Card},-::Union{AbstractArray,-Tuple,-NamedTuple,-Nothing},-::Dict)","page":"Header-data unit (HDU)","title":"FITS.HDU(::Vector{Card}, ::Union{AbstractArray, Tuple, NamedTuple, Nothing}, ::Dict)","text":"","category":"section"},{"location":"HDU/#FITS.HDU(::Type,-::Nothing,-::Union{Card,-Vector{Card},-Vector{Card{:Any}},-Nothing},-::Dict)","page":"Header-data unit (HDU)","title":"FITS.HDU(::Type, ::Nothing, ::Union{Card, Vector{Card}, Vector{Card{<:Any}}, Nothing}, ::Dict)","text":"","category":"section"},{"location":"HDU/#FITS.HDU(::Type,-::AbstractArray,-Union{Card,-Vector{Card},-Vector{Card{:Any}},-Nothing},-::Dict)","page":"Header-data unit (HDU)","title":"FITS.HDU(::Type, ::AbstractArray, Union{Card, Vector{Card}, Vector{Card{<:Any}}, Nothing}, ::Dict)","text":"","category":"section"},{"location":"HDU/#FITS.HDU(::Type,-::Union{Tuple,-NamedTuple},-::Union{Card,-Vector{Card},-Vector{Card{:Any}},-Nothing},-::Dict)","page":"Header-data unit (HDU)","title":"FITS.HDU(::Type, ::Union{Tuple, NamedTuple}, ::Union{Card, Vector{Card}, Vector{Card{<:Any}}, Nothing}, ::Dict)","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS.jl is a Julia implementation of the Flexible Image Transport System (FITS) file IO standard.","category":"page"},{"location":"#FITS.FITS","page":"Home","title":"FITS.FITS","text":"FITS.jl is an IO interface to the Flexible Image Transport System (FITS) file format.\n\nFITS files are composed of an array of header-data units (HDUs).\n\nfits: is the most common function for reading a file.\n\n\n\n\n\n","category":"module"}]
}
